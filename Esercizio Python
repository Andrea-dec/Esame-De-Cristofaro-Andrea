import numpy as np
import matplotlib.pyplot as mpl
import matplotlib.colors as mcolors

#Load data from the file file2.txt
filename = 'file2.txt'

Tot_mass = []
Gas_mass = []
DM_mass = []
Stellar_mass = []
BH_mass = []
pos_x = []
pos_y = []
pos_z = []

#Open and read file2.txt
with open(filename, 'r') as ppf:
 header = ppf.readline() # skip the first line of the file (header)
 for line in ppf:
  line = line.strip()
  columns = line.split()

  Tot_mass.append(float(columns[0]))
  Gas_mass.append(float(columns[1]))
  DM_mass.append(float(columns[2]))
  Stellar_mass.append(float(columns[3]))
  BH_mass.append(float(columns[4]))
  pos_x.append(float(columns[5]))
  pos_y.append(float(columns[6]))
  pos_z.append(float(columns[7]))

#Transform lists into arrays
Tot_mass = np.array(Tot_mass)
Gas_mass = np.array(Gas_mass)
DM_mass = np.array(DM_mass)
Stellar_mass = np.array(Stellar_mass)
BH_mass = np.array(BH_mass)
pos_x = np.array(pos_x)
pos_y = np.array(pos_y)
pos_z = np.array(pos_z)


#FIRST TASK

Barionic_mass = Gas_mass + Stellar_mass

#Linear fit
coeff = np.polyfit(Barionic_mass,DM_mass, 1)
m=coeff[0]
q=coeff[1]

DM_mass_fit=np.zeros_like(Barionic_mass)
for i in range(len(Barionic_mass)):
 DM_mass_fit[i]=m*Barionic_mass[i]+q

#Plotting data and fit
mpl.ylabel('DM_mass [10^10 M_sun/h]')
mpl.xlabel('Barionic_mass [10^10 M_sun/h]')
mpl.plot(Barionic_mass, DM_mass, marker='o', linestyle='none', label='data')
mpl.plot(Barionic_mass, DM_mass_fit, label='Fit')
mpl.legend()
mpl.show()

#Plotting log-log scale
mpl.ylabel('DM_mass [10^10 M_sun/h]')
mpl.xlabel('Barionic_mass [10^10 M_sun/h]')
mpl.xscale('log')
mpl.yscale('log')
mpl.plot(Barionic_mass, DM_mass, marker='o', linestyle='none', label='data')
mpl.title('log-log scale')
mpl.legend()
mpl.show()

#SECOND TASK

#Finding the most massive structure
idx = 0
for i, item in enumerate(Tot_mass):
  if Tot_mass[i]>Tot_mass[idx]:
    idx = i

#Calculating distance of the other structures from the most massive one
distance = []
for i in range(len(pos_x)):
  distance.append(np.sqrt((pos_x[i]-pos_x[idx])**2+(pos_y[i]-pos_y[idx])**2+(pos_z[i]-pos_z[idx])**2))
 
distance=np.array(distance)

#Plotting in linear-log scale
mpl.ylabel('Distance from most massive structure [ckpc/h]')
mpl.xlabel('Total_mass [10^10 M_sun/h]')
mpl.yscale('log')
mpl.plot(distance, Tot_mass, marker='o', color='coral', linestyle='none')
mpl.title('linear-log scale')
mpl.show()


#THIRD TASK

#Creating and plotting histogram of DM_mass distribution and evaluating mean and median
mpl.xscale('log')
mpl.yscale('log')
mpl.xlabel('DM_mass [10^10 M_sun/h]')
mpl.ylabel('Distribution')
mpl.hist(DM_mass, bins=1000, color="darkturquoise", edgecolor="black")
mean = np.mean(DM_mass)
median = np.median(DM_mass)

#Plot mean and median as vertical lines 
mpl.axvline(mean, color="red", linewidth=2, label=f"Mean={mean:.2f}")
mpl.axvline(median, color="mediumblue", linewidth=2, label=f"Median={median:.2f}")
mpl.title('DM_mass distribution log-log scale')
mpl.legend()
mpl.show()


#FOURTH TASK

#Plotting x-y projection of data

fig, (ax1, ax2) = mpl.subplots(1,2, sharey=True, figsize=(22, 8))
fig.suptitle('Projected distribution of haloes (dots size scaling with stellar mass)')

ax1.set_ylabel('pos_y [ckpc/h]')
ax1.set_xlabel('pos_x [ckpc/h]')
ax1.set_title('x-y plane')

riscale=10**5 #Riscaling constant
ax1.scatter(pos_x, pos_y, c=np.log(Gas_mass*riscale+1), cmap='Greens_r', s=np.log(Stellar_mass*riscale+1)*10, label='scatter dots')
ax1.legend()


#Plotting z-y projection of data
ax2.set_xlabel('pos_z [ckpc/h]')
ax2.set_title('z-y plane')
sc=ax2.scatter(pos_z, pos_y, c=np.log(Gas_mass*riscale+1), cmap='Greens_r', s=np.log(Stellar_mass*riscale+1)*10, label='scater dots')
cbar = mpl.colorbar(sc, ax=ax2)
cbar.set_label("Gas Mass [10^5 M_sun/h] (log)")
ax2.legend()
mpl.show()

#Plotting x-z projection of data
mpl.ylabel('pos_z [ckpc/h]')
mpl.xlabel('pos_x [ckpc/h]')
mpl.title('Projected distribution of haloes x-z plane')
sc1=mpl.scatter(pos_x, pos_z, c=np.log(Gas_mass*riscale+1), cmap='Greens_r', s=np.log(Stellar_mass*riscale+1)*5, label='scater dots')
cbar = mpl.colorbar(sc1)
cbar.set_label("Gas Mass [10^5 M_sun/h] (log)")
mpl.legend()
mpl.show()


#FIFTH TASK

#Creating new array of BH and Stellar mass, keeping only values with BH_mass > 8*10^5 M/h
lim=8.*10**-5
BH_mass2=[]
Stellar_mass2=[]
for i, item in enumerate(BH_mass):
  if BH_mass[i] > lim:
   BH_mass2.append(BH_mass[i])
   Stellar_mass2.append(Stellar_mass[i])

#Transform lists into arrays
BH_mass2=np.array(BH_mass2)
Stellar_mass2=np.array(Stellar_mass2)

#Linear fit
coeff = np.polyfit(np.log(Stellar_mass2), np.log(BH_mass2), 1)
m=coeff[0]
q=coeff[1]

BH_mass2_fit=np.zeros_like(BH_mass2)
for i in range(len(BH_mass2)):
 BH_mass2_fit[i]=m*np.log(Stellar_mass2[i])+q

#Plotting data and fit
mpl.ylabel('Stellar_mass [10^10 M_sun/h]')
mpl.xlabel('BH_mass [10^10 M_sun/h]')
mpl.plot(np.log(Stellar_mass2), np.log(BH_mass2), marker='o', color='blue', linestyle='none', label='data')
mpl.plot(np.log(Stellar_mass2), BH_mass2_fit, color='orange', label='Fit')
mpl.title('Haloes with BH_mass > 8*10^5 M / h (log-log scale)')
mpl.legend()
mpl.show()

#SIXTH TASK

dist=np.zeros((5,len(pos_x)-1))
Tot_mass_otherhaloes=np.zeros((5,len(pos_x)-1))
j=-1
for i in range(len(Tot_mass)):
 if ((Tot_mass[i]-0.307)>1.5):   #1.5 valore per ottenre 5 aloni, 1.2 ne escono 6, e a 2.6 ne escono 3
  j=j+1
  p=0
  for k in range(len(pos_x)):
   if (k != i):
    dist[j,p]=np.sqrt((pos_x[i]-pos_x[k])**2+(pos_y[i]-pos_y[k])**2+(pos_z[i]-pos_z[k])**2)
    Tot_mass_otherhaloes[j,p]=Tot_mass[k]
    p=p+1

dist1=dist[0,]
Tot_mass_otherhaloes1=Tot_mass_otherhaloes[0,]
Tot_mass_otherhaloes1=np.array(Tot_mass_otherhaloes1)
dist1=np.array(dist1)

dist2=dist[1,]
Tot_mass_otherhaloes2=Tot_mass_otherhaloes[1,]
Tot_mass_otherhaloes2=np.array(Tot_mass_otherhaloes2)
dist2=np.array(dist2)

dist3=dist[2,]
Tot_mass_otherhaloes3=Tot_mass_otherhaloes[2,]
Tot_mass_otherhaloes3=np.array(Tot_mass_otherhaloes3)
dist3=np.array(dist3)

dist4=dist[3,]
Tot_mass_otherhaloes4=Tot_mass_otherhaloes[3,]
Tot_mass_otherhaloes4=np.array(Tot_mass_otherhaloes4)
dist4=np.array(dist4)

dist5=dist[4,]
Tot_mass_otherhaloes5=Tot_mass_otherhaloes[4,]
Tot_mass_otherhaloes5=np.array(Tot_mass_otherhaloes5)
dist5=np.array(dist5)

histo1,xedges,yedges=np.histogram2d(Tot_mass_otherhaloes1, dist1, bins=[20, 20])
histo2,xedges,yedges=np.histogram2d(Tot_mass_otherhaloes2, dist2, bins=[20, 20])
histo3,xedges,yedges=np.histogram2d(Tot_mass_otherhaloes3, dist3, bins=[20, 20])
histo4,xedges,yedges=np.histogram2d(Tot_mass_otherhaloes4, dist4, bins=[20, 20])
histo5,xedges,yedge=np.histogram2d(Tot_mass_otherhaloes5, dist5, bins=[20, 20])
histo_comulative=histo1+histo2+histo3+histo4+histo5

mpl.pcolormesh(xedges, yedges, histo_comulative.T,cmap='Blues')
mpl.colorbar(label="Number of haloes")
mpl.title('Comulative 2-D histogram of haloes with Tot_mass > 3.07*10^9 Mass_sun/h' )
mpl.xlabel("Tot_mass [10^10 M_sun/h]")
mpl.ylabel("Distance [ckpc/h]")
mpl.show()
